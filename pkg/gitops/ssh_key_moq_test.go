// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package gitops

import (
	"context"
	"sync"
)

// Ensure, that sshKeyerMock does implement sshKeyer.
// If this is not the case, regenerate this file with moq.
var _ sshKeyer = &sshKeyerMock{}

// sshKeyerMock is a mock implementation of sshKeyer.
//
//     func TestSomethingThatUsessshKeyer(t *testing.T) {
//
//         // make and configure a mocked sshKeyer
//         mockedsshKeyer := &sshKeyerMock{
//             CloseFunc: func(ctx context.Context)  {
// 	               panic("mock out the Close method")
//             },
//             privateKeyPathFunc: func() string {
// 	               panic("mock out the privateKeyPath method")
//             },
//         }
//
//         // use mockedsshKeyer in code that requires sshKeyer
//         // and then make assertions.
//
//     }
type sshKeyerMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context)

	// privateKeyPathFunc mocks the privateKeyPath method.
	privateKeyPathFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// privateKeyPath holds details about calls to the privateKeyPath method.
		privateKeyPath []struct {
		}
	}
	lockClose          sync.RWMutex
	lockprivateKeyPath sync.RWMutex
}

// Close calls CloseFunc.
func (mock *sshKeyerMock) Close(ctx context.Context) {
	if mock.CloseFunc == nil {
		panic("sshKeyerMock.CloseFunc: method is nil but sshKeyer.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedsshKeyer.CloseCalls())
func (mock *sshKeyerMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// privateKeyPath calls privateKeyPathFunc.
func (mock *sshKeyerMock) privateKeyPath() string {
	if mock.privateKeyPathFunc == nil {
		panic("sshKeyerMock.privateKeyPathFunc: method is nil but sshKeyer.privateKeyPath was just called")
	}
	callInfo := struct {
	}{}
	mock.lockprivateKeyPath.Lock()
	mock.calls.privateKeyPath = append(mock.calls.privateKeyPath, callInfo)
	mock.lockprivateKeyPath.Unlock()
	return mock.privateKeyPathFunc()
}

// privateKeyPathCalls gets all the calls that were made to privateKeyPath.
// Check the length with:
//     len(mockedsshKeyer.privateKeyPathCalls())
func (mock *sshKeyerMock) privateKeyPathCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockprivateKeyPath.RLock()
	calls = mock.calls.privateKeyPath
	mock.lockprivateKeyPath.RUnlock()
	return calls
}
