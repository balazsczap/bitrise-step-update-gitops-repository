// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package gitops

import (
	"sync"
)

// Ensure, that allFilesRendererMock does implement allFilesRenderer.
// If this is not the case, regenerate this file with moq.
var _ allFilesRenderer = &allFilesRendererMock{}

// allFilesRendererMock is a mock implementation of allFilesRenderer.
//
//     func TestSomethingThatUsesallFilesRenderer(t *testing.T) {
//
//         // make and configure a mocked allFilesRenderer
//         mockedallFilesRenderer := &allFilesRendererMock{
//             renderAllFilesFunc: func() error {
// 	               panic("mock out the renderAllFiles method")
//             },
//         }
//
//         // use mockedallFilesRenderer in code that requires allFilesRenderer
//         // and then make assertions.
//
//     }
type allFilesRendererMock struct {
	// renderAllFilesFunc mocks the renderAllFiles method.
	renderAllFilesFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// renderAllFiles holds details about calls to the renderAllFiles method.
		renderAllFiles []struct {
		}
	}
	lockrenderAllFiles sync.RWMutex
}

// renderAllFiles calls renderAllFilesFunc.
func (mock *allFilesRendererMock) renderAllFiles() error {
	if mock.renderAllFilesFunc == nil {
		panic("allFilesRendererMock.renderAllFilesFunc: method is nil but allFilesRenderer.renderAllFiles was just called")
	}
	callInfo := struct {
	}{}
	mock.lockrenderAllFiles.Lock()
	mock.calls.renderAllFiles = append(mock.calls.renderAllFiles, callInfo)
	mock.lockrenderAllFiles.Unlock()
	return mock.renderAllFilesFunc()
}

// renderAllFilesCalls gets all the calls that were made to renderAllFiles.
// Check the length with:
//     len(mockedallFilesRenderer.renderAllFilesCalls())
func (mock *allFilesRendererMock) renderAllFilesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockrenderAllFiles.RLock()
	calls = mock.calls.renderAllFiles
	mock.lockrenderAllFiles.RUnlock()
	return calls
}
